{"version":3,"sources":["../../../node_modules/ms/index.js","../../../node_modules/debug/src/common.js","../../../node_modules/debug/src/browser.js","../../../node_modules/has-flag/index.js","../../../node_modules/supports-color/index.js","../../../node_modules/debug/src/node.js","../../../node_modules/debug/src/index.js","../src/client.ts","../src/idl/marginfi-types.ts","../src/nodeWallet.ts","../src/types.ts","../src/utils.ts","../src/constants.ts","../src/config.ts","../src/group.ts","../src/bank.ts","../src/account.ts","../src/instructions.ts","../src/clientReadonly.ts","../src/accountReadonly.ts"],"names":["useColors","AnchorProvider","translateAddress","Connection","Keypair","PublicKey","Transaction","VersionedTransaction","process","BankVaultType","AccountType","BigNumber","BorshCoder","parsePriceData","BN","assets","liabilities","MarginRequirementType","PriceBias","MarginfiClient","BorshAccountsCoder","Program","bs58"],"mappings":"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","sourcesContent":["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","'use strict';\nmodule.exports = (flag, argv) => {\n\targv = argv || process.argv;\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst pos = argv.indexOf(prefix + flag);\n\tconst terminatorPos = argv.indexOf('--');\n\treturn pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n","'use strict';\nconst os = require('os');\nconst hasFlag = require('has-flag');\n\nconst env = process.env;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false')) {\n\tforceColor = false;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n\tforceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(stream) {\n\tif (forceColor === false) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (stream && !stream.isTTY && forceColor !== true) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor ? 1 : 0;\n\n\tif (process.platform === 'win32') {\n\t\t// Node.js 7.5.0 is the first version of Node.js to include a patch to\n\t\t// libuv that enables 256 color output on Windows. Anything earlier and it\n\t\t// won't work. However, here we target Node.js 8 at minimum as it is an LTS\n\t\t// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n\t\t// release that supports 256 colors. Windows 10 build 14931 is the first release\n\t\t// that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(process.versions.node.split('.')[0]) >= 8 &&\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel(process.stdout),\n\tstderr: getSupportLevel(process.stderr)\n};\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","import {\n  Address,\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  translateAddress,\n} from \"@project-serum/anchor\";\nimport { bs58 } from \"@project-serum/anchor/dist/cjs/utils/bytes\";\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionMessage,\n  TransactionSignature,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { InstructionsWrapper, Wallet } from \"./types\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { NodeWallet } from \"./nodeWallet\";\nimport {\n  AccountType,\n  Environment,\n  MarginfiConfig,\n  MarginfiProgram,\n  TransactionOptions,\n} from \"./types\";\nimport { loadKeypair } from \"./utils\";\nimport { getConfig } from \"./config\";\nimport MarginfiGroup from \"./group\";\nimport instructions from \"./instructions\";\nimport MarginfiAccount, { MarginfiAccountData } from \"./account\";\nimport { DEFAULT_COMMITMENT, DEFAULT_CONFIRM_OPTS } from \"./constants\";\n\n/**\n * Entrypoint to interact with the marginfi contract.\n */\nclass MarginfiClient {\n  public readonly programId: PublicKey;\n  private _group: MarginfiGroup;\n\n  /**\n   * @internal\n   */\n  private constructor(\n    readonly config: MarginfiConfig,\n    readonly program: MarginfiProgram,\n    readonly wallet: Wallet,\n    group: MarginfiGroup\n  ) {\n    this.programId = config.programId;\n    this._group = group;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiClient factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param config marginfi config\n   * @param wallet User wallet (used to pay fees and sign transations)\n   * @param connection Solana web.js Connection object\n   * @param opts Solana web.js ConfirmOptions object\n   * @returns MarginfiClient instance\n   */\n  static async fetch(\n    config: MarginfiConfig,\n    wallet: Wallet,\n    connection: Connection,\n    opts?: ConfirmOptions\n  ) {\n    const debug = require(\"debug\")(\"mfi:client\");\n    debug(\n      \"Loading Marginfi Client\\n\\tprogram: %s\\n\\tenv: %s\\n\\tgroup: %s\\n\\turl: %s\",\n      config.programId,\n      config.environment,\n      config.groupPk,\n      connection.rpcEndpoint\n    );\n    const provider = new AnchorProvider(connection, wallet, {\n      ...AnchorProvider.defaultOptions(),\n      commitment:\n        connection.commitment ?? AnchorProvider.defaultOptions().commitment,\n      ...opts,\n    });\n\n    const program = new Program(\n      MARGINFI_IDL,\n      config.programId,\n      provider\n    ) as any as MarginfiProgram;\n    return new MarginfiClient(\n      config,\n      program,\n      wallet,\n      await MarginfiGroup.fetch(config, program, opts?.commitment)\n    );\n  }\n\n  static async fromEnv(\n    overrides?: Partial<{\n      env: Environment;\n      connection: Connection;\n      programId: Address;\n      marginfiGroup: Address;\n      wallet: Wallet;\n    }>\n  ): Promise<MarginfiClient> {\n    const debug = require(\"debug\")(\"mfi:client\");\n    const env = overrides?.env ?? (process.env.MARGINFI_ENV! as Environment);\n    const connection =\n      overrides?.connection ??\n      new Connection(process.env.MARGINFI_RPC_ENDPOINT!, {\n        commitment: DEFAULT_COMMITMENT,\n      });\n    const programId =\n      overrides?.programId ?? new PublicKey(process.env.MARGINFI_PROGRAM!);\n    const groupPk =\n      overrides?.marginfiGroup ??\n      (process.env.MARGINFI_GROUP\n        ? new PublicKey(process.env.MARGINFI_GROUP)\n        : PublicKey.default);\n    const wallet =\n      overrides?.wallet ??\n      new NodeWallet(\n        process.env.MARGINFI_WALLET_KEY\n          ? Keypair.fromSecretKey(\n              new Uint8Array(JSON.parse(process.env.MARGINFI_WALLET_KEY))\n            )\n          : loadKeypair(process.env.MARGINFI_WALLET!)\n      );\n\n    debug(\"Loading the marginfi client from env vars\");\n    debug(\n      \"Env: %s\\nProgram: %s\\nGroup: %s\\nSigner: %s\",\n      env,\n      programId,\n      groupPk,\n      wallet.publicKey\n    );\n\n    const config = await getConfig(env, {\n      groupPk: translateAddress(groupPk),\n      programId: translateAddress(programId),\n    });\n\n    return MarginfiClient.fetch(config, wallet, connection, {\n      commitment: connection.commitment,\n    });\n  }\n\n  // --- Getters and setters\n\n  /**\n   * Marginfi account group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  get provider(): AnchorProvider {\n    return this.program.provider as AnchorProvider;\n  }\n\n  // --- Others\n\n  /**\n   * Create transaction instruction to create a new marginfi account under the authority of the user.\n   *\n   * @returns transaction instruction\n   */\n  async makeCreateMarginfiAccountIx(\n    marginfiAccountKeypair?: Keypair\n  ): Promise<InstructionsWrapper> {\n    const dbg = require(\"debug\")(\"mfi:client\");\n    const accountKeypair = marginfiAccountKeypair || Keypair.generate();\n\n    dbg(\"Generating marginfi account ix for %s\", accountKeypair.publicKey);\n\n    const initMarginfiAccountIx = await instructions.makeInitMarginfiAccountIx(\n      this.program,\n      {\n        marginfiGroupPk: this._group.publicKey,\n        marginfiAccountPk: accountKeypair.publicKey,\n        signerPk: this.provider.wallet.publicKey,\n      }\n    );\n\n    const ixs = [initMarginfiAccountIx];\n\n    return {\n      instructions: ixs,\n      keys: [accountKeypair],\n    };\n  }\n\n  /**\n   * Create a new marginfi account under the authority of the user.\n   *\n   * @returns MarginfiAccount instance\n   */\n  async createMarginfiAccount(\n    opts?: TransactionOptions\n  ): Promise<MarginfiAccount> {\n    const dbg = require(\"debug\")(\"mfi:client\");\n\n    const accountKeypair = Keypair.generate();\n\n    const ixs = await this.makeCreateMarginfiAccountIx(accountKeypair);\n    const tx = new Transaction().add(...ixs.instructions);\n    const sig = await this.processTransaction(tx, ixs.keys, opts);\n\n    dbg(\"Created Marginfi account %s\", sig);\n\n    return opts?.dryRun\n      ? Promise.resolve(undefined as unknown as MarginfiAccount)\n      : MarginfiAccount.fetch(accountKeypair.publicKey, this, opts?.commitment);\n  }\n\n  /**\n   * Retrieves the addresses of all marginfi accounts in the udnerlying group.\n   *\n   * @returns Account addresses\n   */\n  async getAllMarginfiAccountAddresses(): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(\n        this.programId,\n        {\n          commitment: this.program.provider.connection.commitment,\n          dataSlice: {\n            offset: 0,\n            length: 0,\n          },\n          filters: [\n            {\n              memcmp: {\n                bytes: this._group.publicKey.toBase58(),\n                offset: 8 + 32, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n              },\n            },\n            {\n              memcmp: {\n                offset: 0,\n                bytes: bs58.encode(\n                  BorshAccountsCoder.accountDiscriminator(\n                    AccountType.MarginfiAccount\n                  )\n                ),\n              },\n            },\n          ],\n        }\n      )\n    ).map((a) => a.pubkey);\n  }\n\n  /**\n   * Retrieves all marginfi accounts under the specified authority.\n   *\n   * @returns MarginfiAccount instances\n   */\n  async getMarginfiAccountsForAuthority(\n    authority?: Address\n  ): Promise<MarginfiAccount[]> {\n    const marginfiGroup = await MarginfiGroup.fetch(this.config, this.program);\n    const _authority = authority\n      ? translateAddress(authority)\n      : this.provider.wallet.publicKey;\n    console.log(\"fetching accounts for \", _authority.toBase58());\n\n    return (\n      await this.program.account.marginfiAccount.all([\n        {\n          memcmp: {\n            bytes: this._group.publicKey.toBase58(),\n            offset: 8, // marginfiGroup is the first field in the account, so only offset is the discriminant\n          },\n        },\n        {\n          memcmp: {\n            bytes: _authority.toBase58(),\n            offset: 8 + 32, // authority is the second field in the account after the authority, so offset by the discriminant and a pubkey\n          },\n        },\n      ])\n    ).map((a) =>\n      MarginfiAccount.fromAccountData(\n        a.publicKey,\n        this,\n        a.account as MarginfiAccountData,\n        marginfiGroup\n      )\n    );\n  }\n\n  /**\n   * Retrieves the addresses of all accounts owned by the marginfi program.\n   *\n   * @returns Account addresses\n   */\n  async getAllProgramAccountAddresses(type: AccountType): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(\n        this.programId,\n        {\n          commitment: this.program.provider.connection.commitment,\n          dataSlice: {\n            offset: 0,\n            length: 0,\n          },\n          filters: [\n            {\n              memcmp: {\n                offset: 0,\n                bytes: bs58.encode(\n                  BorshAccountsCoder.accountDiscriminator(type)\n                ),\n              },\n            },\n          ],\n        }\n      )\n    ).map((a) => a.pubkey);\n  }\n\n  async processTransaction(\n    transaction: Transaction,\n    signers?: Array<Signer>,\n    opts?: TransactionOptions\n  ): Promise<TransactionSignature> {\n    let signature: TransactionSignature = \"\";\n    try {\n      const connection = new Connection(\n        this.provider.connection.rpcEndpoint,\n        this.provider.opts\n      );\n\n      const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n      } = await connection.getLatestBlockhashAndContext();\n\n      const versionedMessage = new TransactionMessage({\n        instructions: transaction.instructions,\n        payerKey: this.provider.publicKey,\n        recentBlockhash: blockhash,\n      });\n      const versionedTransaction = new VersionedTransaction(\n        versionedMessage.compileToV0Message([])\n      );\n\n      await this.wallet.signTransaction(versionedTransaction);\n      if (signers) versionedTransaction.sign(signers);\n\n      if (opts?.dryRun) {\n        const response = await connection.simulateTransaction(\n          versionedTransaction,\n          opts ?? { minContextSlot, sigVerify: false }\n        );\n        console.log(\n          response.value.err\n            ? `❌ Error: ${response.value.err}`\n            : `✅ Success - ${response.value.unitsConsumed} CU`\n        );\n        console.log(\"------ Logs 👇 ------\");\n        console.log(response.value.logs);\n\n        const signaturesEncoded = encodeURIComponent(\n          JSON.stringify(\n            versionedTransaction.signatures.map((s) => bs58.encode(s))\n          )\n        );\n        const messageEncoded = encodeURIComponent(\n          Buffer.from(versionedTransaction.message.serialize()).toString(\n            \"base64\"\n          )\n        );\n        console.log(\n          Buffer.from(versionedTransaction.message.serialize()).toString(\n            \"base64\"\n          )\n        );\n\n        const urlEscaped = `https://explorer.solana.com/tx/inspector?cluster=${this.config.cluster}&signatures=${signaturesEncoded}&message=${messageEncoded}`;\n        console.log(\"------ Inspect 👇 ------\");\n        console.log(urlEscaped);\n\n        return versionedTransaction.signatures[0].toString();\n      } else {\n        let mergedOpts: ConfirmOptions = {\n          ...DEFAULT_CONFIRM_OPTS,\n          commitment: connection.commitment ?? DEFAULT_CONFIRM_OPTS.commitment,\n          preflightCommitment:\n            connection.commitment ?? DEFAULT_CONFIRM_OPTS.commitment,\n          minContextSlot,\n          ...opts,\n        };\n\n        signature = await connection.sendTransaction(\n          versionedTransaction,\n          mergedOpts\n        );\n        await connection.confirmTransaction(\n          {\n            blockhash,\n            lastValidBlockHeight,\n            signature,\n          },\n          mergedOpts.commitment\n        );\n        return signature;\n      }\n    } catch (error: any) {\n      throw `Transaction failed! ${error?.message}`;\n    }\n  }\n}\n\nexport default MarginfiClient;\n","export type Marginfi = {\n  version: \"0.1.0\";\n  name: \"marginfi\";\n  instructions: [\n    {\n      name: \"initializeMarginfiGroup\";\n      docs: [\"Initialize a new Marginfi Group with initial config\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"configureMarginfiGroup\";\n      docs: [\"Configure a Marginfi Group\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        }\n      ];\n      args: [\n        {\n          name: \"config\";\n          type: {\n            defined: \"GroupConfig\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolAddBank\";\n      docs: [\"Add a new bank to the Marginfi Group\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"bankMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"liquidityVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"insuranceVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"feeVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"feeVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"pythOracle\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"bankConfig\";\n          type: {\n            defined: \"BankConfig\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolConfigureBank\";\n      docs: [\"Configure a bank in the Marginfi Group\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"pythOracle\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Set only if pyth oracle is being changed otherwise can be a random account.\"\n          ];\n        }\n      ];\n      args: [\n        {\n          name: \"bankConfigOpt\";\n          type: {\n            defined: \"BankConfigOpt\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolHandleBankruptcy\";\n      docs: [\n        \"Handle bad debt of a bankrupt marginfi account for a given bank.\"\n      ];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"insuranceVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"initializeMarginfiAccount\";\n      docs: [\"Initialize a marginfi account for a given group\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"signer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"bankDeposit\";\n      docs: [\n        \"Deposit assets into a lending account\",\n        \"Repay borrowed assets, if any exist.\"\n      ];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token mint/authority are checked at transfer\"];\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"bankWithdraw\";\n      docs: [\n        \"Withdraw assets from a lending account\",\n        \"Withdraw deposited assets, if any exist, otherwise borrow assets.\",\n        \"Account health checked.\"\n      ];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"lendingAccountLiquidate\";\n      docs: [\n        \"Liquidate a lending account balance of an unhealthy marginfi account\"\n      ];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"assetBank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"assetPriceFeed\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"liabBank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liabPriceFeed\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"liquidatorMarginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"liquidateeMarginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankInsuranceVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"assetAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"bankAccrueInterest\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"feeVault\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"marginfiAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"group\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"authority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"lendingAccount\";\n            type: {\n              defined: \"LendingAccount\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"marginfiGroup\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"bank\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"mintDecimals\";\n            type: \"u8\";\n          },\n          {\n            name: \"group\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"ignore1\";\n            type: {\n              array: [\"u8\", 7];\n            };\n          },\n          {\n            name: \"depositShareValue\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityShareValue\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liquidityVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"liquidityVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"liquidityVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"insuranceVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"insuranceVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"insuranceVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"feeVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"feeVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"feeVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"ignore2\";\n            type: {\n              array: [\"u8\", 2];\n            };\n          },\n          {\n            name: \"config\";\n            type: {\n              defined: \"BankConfig\";\n            };\n          },\n          {\n            name: \"totalLiabilityShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"totalDepositShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"lastUpdate\";\n            type: \"i64\";\n          }\n        ];\n      };\n    }\n  ];\n  types: [\n    {\n      name: \"LendingAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"balances\";\n            type: {\n              array: [\n                {\n                  defined: \"Balance\";\n                },\n                16\n              ];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"Balance\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"active\";\n            type: \"bool\";\n          },\n          {\n            name: \"bankPk\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"ignore\";\n            type: {\n              array: [\"u8\", 7];\n            };\n          },\n          {\n            name: \"depositShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"GroupConfig\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"admin\";\n            type: {\n              option: \"publicKey\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"InterestRateConfig\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"optimalUtilizationRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"plateauInterestRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"maxInterestRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"insuranceFeeFixedApr\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"insuranceIrFee\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"protocolFixedFeeApr\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"protocolIrFee\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankConfig\";\n      docs: [\n        \"TODO: Convert weights to (u64, u64) to avoid precision loss (maybe?)\"\n      ];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"depositWeightInit\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"depositWeightMaint\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityWeightInit\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityWeightMaint\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"maxCapacity\";\n            type: \"u64\";\n          },\n          {\n            name: \"pythOracle\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"interestRateConfig\";\n            type: {\n              defined: \"InterestRateConfig\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"WrappedI80F48\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"value\";\n            type: \"i128\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankConfigOpt\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"depositWeightInit\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"depositWeightMaint\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"liabilityWeightInit\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"liabilityWeightMaint\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"maxCapacity\";\n            type: {\n              option: \"u64\";\n            };\n          },\n          {\n            name: \"pythOracle\";\n            type: {\n              option: \"publicKey\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"WeightType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Initial\";\n          },\n          {\n            name: \"Maintenance\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RiskRequirementType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Initial\";\n          },\n          {\n            name: \"Maintenance\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankVaultType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Liquidity\";\n          },\n          {\n            name: \"Insurance\";\n          },\n          {\n            name: \"Fee\";\n          }\n        ];\n      };\n    }\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"MathError\";\n      msg: \"Math error\";\n    },\n    {\n      code: 6001;\n      name: \"BankNotFound\";\n      msg: \"Invalid bank index\";\n    },\n    {\n      code: 6002;\n      name: \"LendingAccountBalanceNotFound\";\n      msg: \"Lending account balance not found\";\n    },\n    {\n      code: 6003;\n      name: \"BankDepositCapacityExceeded\";\n      msg: \"Bank deposit capacity exceeded\";\n    },\n    {\n      code: 6004;\n      name: \"InvalidTransfer\";\n      msg: \"Invalid transfer\";\n    },\n    {\n      code: 6005;\n      name: \"MissingPythOrBankAccount\";\n      msg: \"Missing Pyth or Bank account\";\n    },\n    {\n      code: 6006;\n      name: \"MissingPythAccount\";\n      msg: \"Missing Pyth account\";\n    },\n    {\n      code: 6007;\n      name: \"InvalidPythAccount\";\n      msg: \"Invalid Pyth account\";\n    },\n    {\n      code: 6008;\n      name: \"MissingBankAccount\";\n      msg: \"Missing Bank account\";\n    },\n    {\n      code: 6009;\n      name: \"InvalidBankAccount\";\n      msg: \"Invalid Bank account\";\n    },\n    {\n      code: 6010;\n      name: \"BadAccountHealth\";\n      msg: \"Bad account health\";\n    },\n    {\n      code: 6011;\n      name: \"LendingAccountBalanceSlotsFull\";\n      msg: \"Lending account balance slots are full\";\n    },\n    {\n      code: 6012;\n      name: \"BankAlreadyExists\";\n      msg: \"Bank already exists\";\n    },\n    {\n      code: 6013;\n      name: \"BorrowingNotAllowed\";\n      msg: \"Borrowing not allowed\";\n    },\n    {\n      code: 6014;\n      name: \"AccountIllegalPostLiquidationState\";\n      msg: \"Illegal post liquidation state, account is either not unhealthy or liquidation was too big\";\n    },\n    {\n      code: 6015;\n      name: \"AccountNotBankrupt\";\n      msg: \"Account is not bankrupt\";\n    },\n    {\n      code: 6016;\n      name: \"BalanceNotBadDebt\";\n      msg: \"Account balance is not bad debt\";\n    },\n    {\n      code: 6017;\n      name: \"InvalidConfig\";\n      msg: \"Invalid group config\";\n    },\n    {\n      code: 6018;\n      name: \"StaleOracle\";\n      msg: \"Stale oracle data\";\n    }\n  ];\n};\n\nexport const IDL: Marginfi = {\n  version: \"0.1.0\",\n  name: \"marginfi\",\n  instructions: [\n    {\n      name: \"initializeMarginfiGroup\",\n      docs: [\"Initialize a new Marginfi Group with initial config\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"configureMarginfiGroup\",\n      docs: [\"Configure a Marginfi Group\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"config\",\n          type: {\n            defined: \"GroupConfig\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolAddBank\",\n      docs: [\"Add a new bank to the Marginfi Group\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"bankMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"liquidityVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"insuranceVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"feeVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"feeVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"pythOracle\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"bankConfig\",\n          type: {\n            defined: \"BankConfig\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolConfigureBank\",\n      docs: [\"Configure a bank in the Marginfi Group\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"pythOracle\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Set only if pyth oracle is being changed otherwise can be a random account.\",\n          ],\n        },\n      ],\n      args: [\n        {\n          name: \"bankConfigOpt\",\n          type: {\n            defined: \"BankConfigOpt\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolHandleBankruptcy\",\n      docs: [\n        \"Handle bad debt of a bankrupt marginfi account for a given bank.\",\n      ],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"insuranceVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"initializeMarginfiAccount\",\n      docs: [\"Initialize a marginfi account for a given group\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"signer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"bankDeposit\",\n      docs: [\n        \"Deposit assets into a lending account\",\n        \"Repay borrowed assets, if any exist.\",\n      ],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token mint/authority are checked at transfer\"],\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"bankWithdraw\",\n      docs: [\n        \"Withdraw assets from a lending account\",\n        \"Withdraw deposited assets, if any exist, otherwise borrow assets.\",\n        \"Account health checked.\",\n      ],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"lendingAccountLiquidate\",\n      docs: [\n        \"Liquidate a lending account balance of an unhealthy marginfi account\",\n      ],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"assetBank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"assetPriceFeed\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"liabBank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liabPriceFeed\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"liquidatorMarginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"liquidateeMarginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankInsuranceVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"assetAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"bankAccrueInterest\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"feeVault\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"marginfiAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"group\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"authority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"lendingAccount\",\n            type: {\n              defined: \"LendingAccount\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"marginfiGroup\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"bank\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"mintDecimals\",\n            type: \"u8\",\n          },\n          {\n            name: \"group\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"ignore1\",\n            type: {\n              array: [\"u8\", 7],\n            },\n          },\n          {\n            name: \"depositShareValue\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityShareValue\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liquidityVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"liquidityVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"liquidityVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"insuranceVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"insuranceVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"insuranceVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"feeVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"feeVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"feeVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"ignore2\",\n            type: {\n              array: [\"u8\", 2],\n            },\n          },\n          {\n            name: \"config\",\n            type: {\n              defined: \"BankConfig\",\n            },\n          },\n          {\n            name: \"totalLiabilityShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"totalDepositShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"lastUpdate\",\n            type: \"i64\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"LendingAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"balances\",\n            type: {\n              array: [\n                {\n                  defined: \"Balance\",\n                },\n                16,\n              ],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"Balance\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"active\",\n            type: \"bool\",\n          },\n          {\n            name: \"bankPk\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"ignore\",\n            type: {\n              array: [\"u8\", 7],\n            },\n          },\n          {\n            name: \"depositShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"GroupConfig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"admin\",\n            type: {\n              option: \"publicKey\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"InterestRateConfig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"optimalUtilizationRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"plateauInterestRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"maxInterestRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"insuranceFeeFixedApr\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"insuranceIrFee\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"protocolFixedFeeApr\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"protocolIrFee\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankConfig\",\n      docs: [\n        \"TODO: Convert weights to (u64, u64) to avoid precision loss (maybe?)\",\n      ],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"depositWeightInit\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"depositWeightMaint\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityWeightInit\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityWeightMaint\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"maxCapacity\",\n            type: \"u64\",\n          },\n          {\n            name: \"pythOracle\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"interestRateConfig\",\n            type: {\n              defined: \"InterestRateConfig\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"WrappedI80F48\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"value\",\n            type: \"i128\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankConfigOpt\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"depositWeightInit\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"depositWeightMaint\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"liabilityWeightInit\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"liabilityWeightMaint\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"maxCapacity\",\n            type: {\n              option: \"u64\",\n            },\n          },\n          {\n            name: \"pythOracle\",\n            type: {\n              option: \"publicKey\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"WeightType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Initial\",\n          },\n          {\n            name: \"Maintenance\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RiskRequirementType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Initial\",\n          },\n          {\n            name: \"Maintenance\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankVaultType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Liquidity\",\n          },\n          {\n            name: \"Insurance\",\n          },\n          {\n            name: \"Fee\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"MathError\",\n      msg: \"Math error\",\n    },\n    {\n      code: 6001,\n      name: \"BankNotFound\",\n      msg: \"Invalid bank index\",\n    },\n    {\n      code: 6002,\n      name: \"LendingAccountBalanceNotFound\",\n      msg: \"Lending account balance not found\",\n    },\n    {\n      code: 6003,\n      name: \"BankDepositCapacityExceeded\",\n      msg: \"Bank deposit capacity exceeded\",\n    },\n    {\n      code: 6004,\n      name: \"InvalidTransfer\",\n      msg: \"Invalid transfer\",\n    },\n    {\n      code: 6005,\n      name: \"MissingPythOrBankAccount\",\n      msg: \"Missing Pyth or Bank account\",\n    },\n    {\n      code: 6006,\n      name: \"MissingPythAccount\",\n      msg: \"Missing Pyth account\",\n    },\n    {\n      code: 6007,\n      name: \"InvalidPythAccount\",\n      msg: \"Invalid Pyth account\",\n    },\n    {\n      code: 6008,\n      name: \"MissingBankAccount\",\n      msg: \"Missing Bank account\",\n    },\n    {\n      code: 6009,\n      name: \"InvalidBankAccount\",\n      msg: \"Invalid Bank account\",\n    },\n    {\n      code: 6010,\n      name: \"BadAccountHealth\",\n      msg: \"Bad account health\",\n    },\n    {\n      code: 6011,\n      name: \"LendingAccountBalanceSlotsFull\",\n      msg: \"Lending account balance slots are full\",\n    },\n    {\n      code: 6012,\n      name: \"BankAlreadyExists\",\n      msg: \"Bank already exists\",\n    },\n    {\n      code: 6013,\n      name: \"BorrowingNotAllowed\",\n      msg: \"Borrowing not allowed\",\n    },\n    {\n      code: 6014,\n      name: \"AccountIllegalPostLiquidationState\",\n      msg: \"Illegal post liquidation state, account is either not unhealthy or liquidation was too big\",\n    },\n    {\n      code: 6015,\n      name: \"AccountNotBankrupt\",\n      msg: \"Account is not bankrupt\",\n    },\n    {\n      code: 6016,\n      name: \"BalanceNotBadDebt\",\n      msg: \"Account balance is not bad debt\",\n    },\n    {\n      code: 6017,\n      name: \"InvalidConfig\",\n      msg: \"Invalid group config\",\n    },\n    {\n      code: 6018,\n      name: \"StaleOracle\",\n      msg: \"Stale oracle data\",\n    },\n  ],\n};\n","import {\n  Keypair,\n  PublicKey,\n  Transaction,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Wallet } from \"./types\";\n\n/**\n * NodeWallet\n *\n * Anchor-compliant wallet implementation.\n */\nexport class NodeWallet implements Wallet {\n  /**\n   * @param payer Keypair of the associated payer\n   */\n  constructor(readonly payer: Keypair) {}\n\n  /**\n   * Factory for the local wallet.\n   * Makes use of the `MARGINFI_WALLET` env var, with fallback to `$HOME/.config/solana/id.json`.\n   */\n  static local(): NodeWallet {\n    const process = require(\"process\");\n    const payer = Keypair.fromSecretKey(\n      Buffer.from(\n        JSON.parse(\n          require(\"fs\").readFileSync(\n            process.env.MARGINFI_WALLET ||\n              require(\"path\").join(\n                require(\"os\").homedir(),\n                \".config/solana/id.json\"\n              ),\n            {\n              encoding: \"utf-8\",\n            }\n          )\n        )\n      )\n    );\n    return new NodeWallet(payer);\n  }\n\n  /**\n   * Factory for the Anchor local wallet.\n   */\n  static anchor(): NodeWallet {\n    const process = require(\"process\");\n    if (!process.env.ANCHOR_WALLET || process.env.ANCHOR_WALLET === \"\") {\n      throw new Error(\n        \"expected environment variable `ANCHOR_WALLET` is not set.\"\n      );\n    }\n    const payer = Keypair.fromSecretKey(\n      Buffer.from(\n        JSON.parse(\n          require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n            encoding: \"utf-8\",\n          })\n        )\n      )\n    );\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction<T extends Transaction | VersionedTransaction>(\n    tx: T\n  ): Promise<T> {\n    if (\"version\" in tx) {\n      tx.sign([this.payer]);\n    } else {\n      tx.partialSign(this.payer);\n    }\n    return tx;\n  }\n\n  async signAllTransactions<T extends Transaction | VersionedTransaction>(\n    txs: T[]\n  ): Promise<T[]> {\n    return txs.map((tx) => {\n      if (\"version\" in tx) {\n        tx.sign([this.payer]);\n        return tx;\n      } else {\n        tx.partialSign(this.payer);\n        return tx;\n      }\n    });\n  }\n\n  get publicKey(): PublicKey {\n    return this.payer.publicKey;\n  }\n}\n","import { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport { SignerWalletAdapter } from \"@solana/wallet-adapter-base\";\nimport {\n  ConfirmOptions,\n  Keypair,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { Marginfi } from \"./idl/marginfi-types\";\n\nexport type MarginfiProgram = Omit<Program<Marginfi>, \"provider\"> & {\n  provider: AnchorProvider;\n};\nexport type MarginfiReadonlyProgram = Program<Marginfi>;\n\nexport type UiAmount = BigNumber | number | string;\n\nexport type Wallet = Pick<\n  SignerWalletAdapter,\n  \"signAllTransactions\" | \"signTransaction\"\n> & {\n  publicKey: PublicKey;\n};\n\nexport interface TransactionOptions extends ConfirmOptions {\n  dryRun?: boolean;\n}\n\n/**\n * Supported config environments.\n */\nexport type Environment = \"devnet1\";\n\nexport interface InstructionsWrapper {\n  instructions: TransactionInstruction[];\n  keys: Keypair[];\n}\n\n/**\n * Marginfi bank vault type\n */\nexport enum BankVaultType {\n  LiquidityVault,\n  InsuranceVault,\n  FeeVault,\n}\n\nexport interface MarginfiConfig {\n  environment: Environment;\n  cluster: string;\n  programId: PublicKey;\n  groupPk: PublicKey;\n  banks: BankAddress[];\n}\n\nexport interface BankAddress {\n  label: string;\n  address: PublicKey;\n}\n\nexport interface InstructionsWrapper {\n  instructions: TransactionInstruction[];\n  keys: Keypair[];\n}\n\n// --- On-chain account structs\n\nexport enum AccountType {\n  MarginfiGroup = \"marginfiGroup\",\n  MarginfiAccount = \"marginfiAccount\",\n}\n\nexport interface WrappedI80F48 {\n  value: BN;\n}\n","import { Address, AnchorProvider, BN } from \"@project-serum/anchor\";\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED,\n  PDA_BANK_INSURANCE_VAULT_AUTH_SEED,\n  PDA_BANK_FEE_VAULT_AUTH_SEED,\n  PDA_BANK_LIQUIDITY_VAULT_SEED,\n  PDA_BANK_INSURANCE_VAULT_SEED,\n  PDA_BANK_FEE_VAULT_SEED,\n} from \"./constants\";\nimport { BankVaultType, UiAmount } from \"./types\";\nimport { Decimal } from \"decimal.js\";\n\n/**\n * Load Keypair from the provided file.\n */\nexport function loadKeypair(keypairPath: string): Keypair {\n  const path = require(\"path\");\n  if (!keypairPath || keypairPath == \"\") {\n    throw new Error(\"Keypair is required!\");\n  }\n  if (keypairPath[0] === \"~\") {\n    keypairPath = path.join(require(\"os\").homedir(), keypairPath.slice(1));\n  }\n  const keyPath = path.normalize(keypairPath);\n  const loaded = Keypair.fromSecretKey(\n    new Uint8Array(JSON.parse(require(\"fs\").readFileSync(keyPath).toString()))\n  );\n  return loaded;\n}\n\n// /**\n//  * @internal\n//  */\n// export function getEnvFromStr(envString: string = \"devnet\"): Environment {\n//   switch (envString.toUpperCase()) {\n//     case \"MAINNET\":\n//       return Environment.MAINNET;\n//     case \"MAINNET-BETA\":\n//       return Environment.MAINNET;\n//     default:\n//       return Environment.DEVNET;\n//   }\n// }\n\n/**\n * Transaction processing and error-handling helper.\n */\nexport async function processTransaction(\n  provider: AnchorProvider,\n  tx: Transaction,\n  signers?: Array<Signer>,\n  opts?: ConfirmOptions\n): Promise<TransactionSignature> {\n  const connection = new Connection(\n    provider.connection.rpcEndpoint,\n    provider.opts\n  );\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = provider.wallet.publicKey;\n  tx = await provider.wallet.signTransaction(tx);\n\n  if (signers === undefined) {\n    signers = [];\n  }\n  signers\n    .filter((s) => s !== undefined)\n    .forEach((kp) => {\n      tx.partialSign(kp);\n    });\n\n  try {\n    const signature = await connection.sendRawTransaction(\n      tx.serialize(),\n      opts || {\n        skipPreflight: false,\n        preflightCommitment: provider.connection.commitment,\n        commitment: provider.connection.commitment,\n        minContextSlot,\n      }\n    );\n    await connection.confirmTransaction({\n      blockhash,\n      lastValidBlockHeight,\n      signature,\n    });\n    return signature;\n  } catch (e: any) {\n    console.log(e);\n    throw e;\n  }\n}\n\n/**\n * @internal\n */\nexport function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function wrappedI80F48toBigNumber(\n  { value }: { value: BN },\n  scaleDecimal: number = 0\n): BigNumber {\n  let numbers = new Decimal(\n    `${value.isNeg() ? \"-\" : \"\"}0b${value.abs().toString(2)}p-48`\n  ).dividedBy(10 ** scaleDecimal);\n  return new BigNumber(numbers.toString());\n}\n\n/**\n * Converts a ui representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).\n */\nexport function toNumber(amount: UiAmount): number {\n  let amt: number;\n  if (typeof amount === \"number\") {\n    amt = amount;\n  } else if (typeof amount === \"string\") {\n    amt = Number(amount);\n  } else {\n    amt = amount.toNumber();\n  }\n  return amt;\n}\n\n/**\n * Converts a ui representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).\n */\nexport function toBigNumber(amount: UiAmount | BN): BigNumber {\n  let amt: BigNumber;\n  if (amount instanceof BigNumber) {\n    amt = amount;\n  } else {\n    amt = new BigNumber(amount.toString());\n  }\n  return amt;\n}\n\n/**\n * Converts a UI representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).\n */\nexport function uiToNative(amount: UiAmount, decimals: number): BN {\n  let amt = toBigNumber(amount);\n  return new BN(amt.times(10 ** decimals).toFixed(0, BigNumber.ROUND_FLOOR));\n}\n\n/**\n * Converts a native representation of a token amount into its UI value as `number`, given the specified mint decimal amount (default to 6 for USDC).\n */\nexport function nativeToUi(amount: UiAmount | BN, decimals: number): number {\n  let amt = toBigNumber(amount);\n  return amt.div(10 ** decimals).toNumber();\n}\n\nfunction getBankVaultSeeds(type: BankVaultType): Buffer {\n  switch (type) {\n    case BankVaultType.LiquidityVault:\n      return PDA_BANK_LIQUIDITY_VAULT_SEED;\n    case BankVaultType.InsuranceVault:\n      return PDA_BANK_INSURANCE_VAULT_SEED;\n    case BankVaultType.FeeVault:\n      return PDA_BANK_FEE_VAULT_SEED;\n    default:\n      throw Error(`Unknown vault type ${type}`);\n  }\n}\n\nfunction getBankVaultAuthoritySeeds(type: BankVaultType): Buffer {\n  switch (type) {\n    case BankVaultType.LiquidityVault:\n      return PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED;\n    case BankVaultType.InsuranceVault:\n      return PDA_BANK_INSURANCE_VAULT_AUTH_SEED;\n    case BankVaultType.FeeVault:\n      return PDA_BANK_FEE_VAULT_AUTH_SEED;\n    default:\n      throw Error(`Unknown vault type ${type}`);\n  }\n}\n\n/**\n * Compute authority PDA for a specific marginfi group bank vault\n */\nexport function getBankVaultAuthority(\n  bankVaultType: BankVaultType,\n  bankPk: PublicKey,\n  programId: PublicKey\n): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [getBankVaultAuthoritySeeds(bankVaultType), bankPk.toBuffer()],\n    programId\n  );\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(pubkey: Address, chars = 4): string {\n  const pubkeyStr = pubkey.toString();\n  return `${pubkeyStr.slice(0, chars)}...${pubkeyStr.slice(-chars)}`;\n}\n","import { Commitment, ConfirmOptions, SendOptions } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\n\nexport const PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED = Buffer.from(\n  \"liquidity_vault_auth\"\n);\nexport const PDA_BANK_INSURANCE_VAULT_AUTH_SEED = Buffer.from(\n  \"insurance_vault_auth\"\n);\nexport const PDA_BANK_FEE_VAULT_AUTH_SEED = Buffer.from(\"fee_vault_auth\");\n\nexport const PDA_BANK_LIQUIDITY_VAULT_SEED = Buffer.from(\"liquidity_vault\");\nexport const PDA_BANK_INSURANCE_VAULT_SEED = Buffer.from(\"insurance_vault\");\nexport const PDA_BANK_FEE_VAULT_SEED = Buffer.from(\"fee_vault\");\n\nexport const DEFAULT_COMMITMENT: Commitment = \"processed\";\nexport const DEFAULT_SEND_OPTS: SendOptions = {\n  skipPreflight: false,\n  preflightCommitment: DEFAULT_COMMITMENT,\n};\n\nexport const DEFAULT_CONFIRM_OPTS: ConfirmOptions = {\n  commitment: DEFAULT_COMMITMENT,\n  ...DEFAULT_SEND_OPTS,\n};\n\nexport const PYTH_PRICE_CONF_INTERVALS = new BigNumber(4.24);\nexport const USDC_DECIMALS = 6;","import { PublicKey } from \"@solana/web3.js\";\nimport { BankAddress, Environment, MarginfiConfig } from \"./types\";\nimport { array, assert, Infer, literal, object, string } from \"superstruct\";\nimport configs from \"./configs.json\";\n\nconst BankConfigRaw = object({\n  label: string(),\n  address: string(),\n});\nconst MarginfiConfigRaw = object({\n  label: literal(\"devnet1\"),\n  cluster: string(),\n  program: string(),\n  group: string(),\n  banks: array(BankConfigRaw),\n});\nconst ConfigRaw = array(MarginfiConfigRaw);\n\nexport type BankConfigRaw = Infer<typeof BankConfigRaw>;\nexport type MarginfiConfigRaw = Infer<typeof MarginfiConfigRaw>;\nexport type ConfigRaw = Infer<typeof ConfigRaw>;\n\nfunction parseBankConfig(bankConfigRaw: BankConfigRaw): BankAddress {\n  return {\n    label: bankConfigRaw.label,\n    address: new PublicKey(bankConfigRaw.address),\n  };\n}\n\nfunction parseConfig(configRaw: MarginfiConfigRaw): MarginfiConfig {\n  return {\n    environment: configRaw.label,\n    cluster: configRaw.cluster,\n    programId: new PublicKey(configRaw.program),\n    groupPk: new PublicKey(configRaw.group),\n    banks: configRaw.banks.map((raw) => parseBankConfig(raw)),\n  };\n}\n\nfunction parseConfigs(configRaw: ConfigRaw): {\n  [label: string]: MarginfiConfig;\n} {\n  return configRaw.reduce(\n    (config, current, _) => ({\n      [current.label]: parseConfig(current),\n      ...config,\n    }),\n    {} as {\n      [label: string]: MarginfiConfig;\n    }\n  );\n}\n\nfunction loadDefaultConfig(): {\n  [label: string]: MarginfiConfig;\n} {\n  assert(configs, ConfigRaw);\n  return parseConfigs(configs);\n}\n\n/**\n * Define marginfi-specific config per profile\n *\n * @internal\n */\nfunction getMarginfiConfig(\n  environment: Environment,\n  overrides?: Partial<Omit<MarginfiConfig, \"environment\">>\n): MarginfiConfig {\n  const defaultConfigs = loadDefaultConfig();\n\n  switch (environment) {\n    case \"devnet1\":\n      const defaultConfig = defaultConfigs[environment];\n      return {\n        environment,\n        programId: overrides?.programId || defaultConfig.programId,\n        groupPk: overrides?.groupPk || defaultConfig.groupPk,\n        cluster: overrides?.cluster || defaultConfig.cluster,\n        banks: overrides?.banks || defaultConfig.banks,\n      };\n    default:\n      throw Error(`Unknown environment ${environment}`);\n  }\n}\n\n/**\n * Retrieve config per environment\n */\nexport function getConfig(\n  environment: Environment,\n  overrides?: Partial<Omit<MarginfiConfig, \"environment\">>\n): MarginfiConfig {\n  return {\n    ...getMarginfiConfig(environment, overrides),\n  };\n}\n","import {\n  Address,\n  BN,\n  BorshCoder,\n  translateAddress,\n} from \"@project-serum/anchor\";\nimport { parseBaseData, parsePriceData } from \"@pythnetwork/client\";\nimport { Commitment, PublicKey } from \"@solana/web3.js\";\nimport Bank, { BankData } from \"./bank\";\nimport { DEFAULT_COMMITMENT } from \"./constants\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { AccountType, MarginfiConfig, MarginfiProgram } from \"./types\";\n\n/**\n * Wrapper class around a specific marginfi group.\n */\nclass MarginfiGroup {\n  public readonly publicKey: PublicKey;\n\n  private _program: MarginfiProgram;\n  private _config: MarginfiConfig;\n\n  private _admin: PublicKey;\n  private _banks: Map<string, Bank>;\n\n  /**\n   * @internal\n   */\n  private constructor(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    rawData: MarginfiGroupData,\n    banks: Bank[]\n  ) {\n    this.publicKey = config.groupPk;\n    this._config = config;\n    this._program = program;\n\n    this._admin = rawData.admin;\n    this._banks = banks.reduce((acc, current) => {\n      acc.set(current.publicKey.toBase58(), current);\n      return acc;\n    }, new Map<string, Bank>());\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get admin(): PublicKey {\n    return this._admin;\n  }\n\n  get banks(): Map<string, Bank> {\n    return this._banks;\n  }\n  // --- Factories\n\n  /**\n   * MarginfiGroup network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiGroup.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @return MarginfiGroup instance\n   */\n  static async fetch(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ) {\n    const debug = require(\"debug\")(`mfi:margin-group`);\n    debug(\"Loading Marginfi Group %s\", config.groupPk);\n\n    const accountData = await MarginfiGroup._fetchAccountData(\n      config,\n      program,\n      commitment\n    );\n\n    const bankAddresses = config.banks.map((b) => b.address);\n    let bankAccountsData = await program.account.bank.fetchMultiple(\n      bankAddresses,\n      commitment\n    );\n\n    let nullAccounts = [];\n    for (let i = 0; i < bankAccountsData.length; i++) {\n      if (bankAccountsData[i] === null) nullAccounts.push(bankAddresses[i]);\n    }\n    if (nullAccounts.length > 0) {\n      throw Error(`Failed to fetch banks ${nullAccounts}`);\n    }\n\n    const pythAccounts =\n      await program.provider.connection.getMultipleAccountsInfo(\n        bankAccountsData.map((b) => (b as BankData).config.pythOracle)\n      );\n\n    const banks = bankAccountsData.map(\n      (bd, index) =>\n        new Bank(\n          config.banks[index].label,\n          bankAddresses[index],\n          bd as BankData,\n          parsePriceData(pythAccounts[index]!.data)\n        )\n    );\n\n    return new MarginfiGroup(config, program, accountData, banks);\n  }\n\n  /**\n   * MarginfiGroup local factory (decoded)\n   *\n   * Instantiate a MarginfiGroup according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param accountData Decoded marginfi group data\n   * @return MarginfiGroup instance\n   */\n  static fromAccountData(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    accountData: MarginfiGroupData,\n    banks: Bank[]\n  ) {\n    return new MarginfiGroup(config, program, accountData, banks);\n  }\n\n  /**\n   * MarginfiGroup local factory (encoded)\n   *\n   * Instantiate a MarginfiGroup according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param data Encoded marginfi group data\n   * @return MarginfiGroup instance\n   */\n  static fromAccountDataRaw(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    rawData: Buffer,\n    banks: Bank[]\n  ) {\n    const data = MarginfiGroup.decode(rawData);\n    return MarginfiGroup.fromAccountData(config, program, data, banks);\n  }\n\n  // --- Others\n\n  /**\n   * Fetch marginfi group account data according to the config.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @return Decoded marginfi group account data struct\n   */\n  private static async _fetchAccountData(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiGroupData> {\n    const mergedCommitment =\n      commitment ??\n      program.provider.connection.commitment ??\n      DEFAULT_COMMITMENT;\n\n    const data: MarginfiGroupData = (await program.account.marginfiGroup.fetch(\n      config.groupPk,\n      mergedCommitment\n    )) as any;\n\n    return data;\n  }\n\n  /**\n   * Decode marginfi group account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @return Decoded marginfi group account data struct\n   */\n  static decode(encoded: Buffer): MarginfiGroupData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiGroup, encoded);\n  }\n\n  /**\n   * Encode marginfi group account data according to the Anchor IDL.\n   *\n   * @param decoded Encoded marginfi group account data buffer\n   * @return Raw data buffer\n   */\n  static async encode(decoded: MarginfiGroupData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiGroup, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload(commitment?: Commitment) {\n    const data = await MarginfiGroup._fetchAccountData(\n      this._config,\n      this._program,\n      commitment\n    );\n  }\n\n  /**\n   * Get bank by label.\n   */\n  getBankByLabel(label: string): Bank | null {\n    return (\n      [...this._banks.values()].find((bank) => bank.label === label) ?? null\n    );\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  getBankByPk(publicKey: Address): Bank | null {\n    let _publicKey = translateAddress(publicKey);\n    return this._banks.get(_publicKey.toString()) ?? null;\n  }\n}\n\nexport default MarginfiGroup;\n\n// On-chain types\n\nexport interface MarginfiGroupData {\n  admin: PublicKey;\n  reservedSpace: BN[];\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\nimport { MarginRequirementType } from \"./account\";\nimport { WrappedI80F48 } from \"./types\";\nimport { nativeToUi, wrappedI80F48toBigNumber } from \"./utils\";\nimport { Connection } from \"@solana/web3.js\";\nimport { PYTH_PRICE_CONF_INTERVALS, USDC_DECIMALS } from \"./constants\";\nimport { PriceData, parsePriceData } from \"@pythnetwork/client\";\n\n/**\n * Wrapper class around a specific marginfi group.\n */\nclass Bank {\n  public readonly publicKey: PublicKey;\n\n  public readonly label: string;\n\n  public group: PublicKey;\n  public mint: PublicKey;\n  public mintDecimals: number;\n\n  public depositShareValue: BigNumber;\n  public liabilityShareValue: BigNumber;\n\n  public liquidityVault: PublicKey;\n  public liquidityVaultBump: number;\n  public liquidityVaultAuthorityBump: number;\n\n  public insuranceVault: PublicKey;\n  public insuranceVaultBump: number;\n  public insuranceVaultAuthorityBump: number;\n\n  public feeVault: PublicKey;\n  public feeVaultBump: number;\n  public feeVaultAuthorityBump: number;\n\n  public config: BankConfig;\n\n  public totalDepositShares: BigNumber;\n  public totalLiabilityShares: BigNumber;\n\n  private priceData: PriceData;\n\n  constructor(label: string, address: PublicKey, rawData: BankData, priceData: PriceData) {\n    this.label = label;\n    this.publicKey = address;\n\n    this.mint = rawData.mint;\n    this.mintDecimals = rawData.mintDecimals;\n    this.group = rawData.group;\n\n    this.depositShareValue = wrappedI80F48toBigNumber(rawData.depositShareValue);\n    this.liabilityShareValue = wrappedI80F48toBigNumber(rawData.liabilityShareValue);\n\n    this.liquidityVault = rawData.liquidityVault;\n    this.liquidityVaultBump = rawData.liquidityVaultBump;\n    this.liquidityVaultAuthorityBump = rawData.liquidityVaultAuthorityBump;\n\n    this.insuranceVault = rawData.insuranceVault;\n    this.insuranceVaultBump = rawData.insuranceVaultBump;\n    this.insuranceVaultAuthorityBump = rawData.insuranceVaultAuthorityBump;\n\n    this.feeVault = rawData.feeVault;\n    this.feeVaultBump = rawData.feeVaultBump;\n    this.feeVaultAuthorityBump = rawData.feeVaultAuthorityBump;\n\n    this.config = {\n      depositWeightInit: wrappedI80F48toBigNumber(rawData.config.depositWeightInit),\n      depositWeightMaint: wrappedI80F48toBigNumber(rawData.config.depositWeightMaint),\n      liabilityWeightInit: wrappedI80F48toBigNumber(rawData.config.liabilityWeightInit),\n      liabilityWeightMaint: wrappedI80F48toBigNumber(rawData.config.liabilityWeightMaint),\n      maxCapacity: nativeToUi(rawData.config.maxCapacity, this.mintDecimals),\n      pythOracle: rawData.config.pythOracle,\n      interestRateConfig: {\n        insuranceFeeFixedApr: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.insuranceFeeFixedApr),\n        maxInterestRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.maxInterestRate),\n        insuranceIrFee: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.insuranceIrFee),\n        optimalUtilizationRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.optimalUtilizationRate),\n        plateauInterestRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.optimalUtilizationRate),\n        protocolFixedFeeApr: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.protocolFixedFeeApr),\n        protocolIrFee: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.protocolIrFee),\n      },\n    };\n\n    this.totalDepositShares = wrappedI80F48toBigNumber(rawData.totalDepositShares);\n    this.totalLiabilityShares = wrappedI80F48toBigNumber(rawData.totalLiabilityShares);\n\n    this.priceData = priceData;\n  }\n\n  get totalDeposits(): BigNumber {\n    return this.getAssetQuantity(this.totalDepositShares);\n  }\n\n  get totalLiabilities(): BigNumber {\n    return this.getLiabilityQuantity(this.totalLiabilityShares);\n  }\n\n  public async reloadPriceData(connection: Connection) {\n    const pythPriceAccount = await connection.getAccountInfo(this.config.pythOracle);\n    this.priceData = parsePriceData(pythPriceAccount!.data);\n  }\n\n  public getAssetQuantity(depositShares: BigNumber): BigNumber {\n    return depositShares.times(this.depositShareValue);\n  }\n\n  public getLiabilityQuantity(liabilityShares: BigNumber): BigNumber {\n    return liabilityShares.times(this.liabilityShareValue);\n  }\n\n  public getAssetShares(depositValue: BigNumber): BigNumber {\n    return depositValue.div(this.depositShareValue);\n  }\n\n  public getLiabilityShares(liabilityValue: BigNumber): BigNumber {\n    return liabilityValue.div(this.liabilityShareValue);\n  }\n\n  public getAssetUsdValue(\n    depositShares: BigNumber,\n    marginRequirementType: MarginRequirementType,\n    priceBias: PriceBias\n  ): BigNumber {\n    return this.getUsdValue(\n      this.getAssetQuantity(depositShares),\n      priceBias,\n      this.getAssetWeight(marginRequirementType)\n    );\n  }\n\n  public getLiabilityUsdValue(\n    liabilityShares: BigNumber,\n    marginRequirementType: MarginRequirementType,\n    priceBias: PriceBias\n  ): BigNumber {\n    return this.getUsdValue(\n      this.getLiabilityQuantity(liabilityShares),\n      priceBias,\n      this.getLiabilityWeight(marginRequirementType)\n    );\n  }\n\n  public getUsdValue(quantity: BigNumber, priceBias: PriceBias, weight?: BigNumber): BigNumber {\n    const price = this.getPrice(priceBias);\n    return quantity\n      .times(price)\n      .times(weight ?? 1)\n      .dividedBy(10 ** this.mintDecimals);\n  }\n\n  public getPrice(priceBias: PriceBias): BigNumber {\n    const basePrice = this.priceData.emaPrice;\n    const confidenceRange = this.priceData.emaConfidence;\n\n    const basePriceVal = new BigNumber(basePrice.value);\n    const confidenceRangeVal = new BigNumber(confidenceRange.value).times(PYTH_PRICE_CONF_INTERVALS);\n\n    switch (priceBias) {\n      case PriceBias.Lowest:\n        return basePriceVal.minus(confidenceRangeVal);\n      case PriceBias.Highest:\n        return basePriceVal.plus(confidenceRangeVal);\n      case PriceBias.None:\n        return basePriceVal;\n    }\n  }\n\n  // Return deposit weight based on margin requirement types\n  public getAssetWeight(marginRequirementType: MarginRequirementType): BigNumber {\n    switch (marginRequirementType) {\n      case MarginRequirementType.Init:\n        return this.config.depositWeightInit;\n      case MarginRequirementType.Maint:\n        return this.config.depositWeightMaint;\n      case MarginRequirementType.Equity:\n        return new BigNumber(1);\n      default:\n        throw new Error(\"Invalid margin requirement type\");\n    }\n  }\n\n  public getLiabilityWeight(marginRequirementType: MarginRequirementType): BigNumber {\n    switch (marginRequirementType) {\n      case MarginRequirementType.Init:\n        return this.config.liabilityWeightInit;\n      case MarginRequirementType.Maint:\n        return this.config.liabilityWeightMaint;\n      case MarginRequirementType.Equity:\n        return new BigNumber(1);\n      default:\n        throw new Error(\"Invalid margin requirement type\");\n    }\n  }\n\n  public getQuantityFromUsdValue(usdValue: BigNumber, priceBias: PriceBias): BigNumber {\n    const price = this.getPrice(priceBias);\n    return usdValue.div(price);\n  }\n\n  public getInterestRates(): {\n    lendingRate: BigNumber;\n    borrowingRate: BigNumber;\n  } {\n    const { insuranceFeeFixedApr, insuranceIrFee, protocolFixedFeeApr, protocolIrFee } = this.config.interestRateConfig;\n\n    const rateFee = insuranceFeeFixedApr.plus(protocolFixedFeeApr);\n    const fixedFee = insuranceIrFee.plus(protocolIrFee);\n\n    const interestRate = this.interestRateCurve();\n    const utilizationRate = this.getUtilizationRate();\n\n    const lendingRate = interestRate.times(utilizationRate);\n    const borrowingRate = interestRate.times(new BigNumber(1).plus(rateFee)).plus(fixedFee);\n\n    return { lendingRate, borrowingRate };\n  }\n\n  private interestRateCurve(): BigNumber {\n    const { optimalUtilizationRate, plateauInterestRate, maxInterestRate } = this.config.interestRateConfig;\n\n    const utilizationRate = this.getUtilizationRate();\n\n    if (utilizationRate.lte(optimalUtilizationRate)) {\n      return utilizationRate.times(maxInterestRate).div(optimalUtilizationRate);\n    } else {\n      return utilizationRate\n        .minus(optimalUtilizationRate)\n        .div(new BigNumber(1).minus(optimalUtilizationRate))\n        .times(maxInterestRate.minus(plateauInterestRate))\n        .plus(plateauInterestRate);\n    }\n  }\n\n  private getUtilizationRate(): BigNumber {\n    return this.totalLiabilities.div(this.totalDeposits);\n  }\n}\n\nexport default Bank;\n\n// Client types\n\nexport interface BankConfig {\n  depositWeightInit: BigNumber;\n  depositWeightMaint: BigNumber;\n\n  liabilityWeightInit: BigNumber;\n  liabilityWeightMaint: BigNumber;\n\n  maxCapacity: number;\n\n  pythOracle: PublicKey;\n  interestRateConfig: InterestRateConfig;\n}\n\nexport interface InterestRateConfig {\n  // Curve Params\n  optimalUtilizationRate: BigNumber;\n  plateauInterestRate: BigNumber;\n  maxInterestRate: BigNumber;\n\n  // Fees\n  insuranceFeeFixedApr: BigNumber;\n  insuranceIrFee: BigNumber;\n  protocolFixedFeeApr: BigNumber;\n  protocolIrFee: BigNumber;\n}\n\n// On-chain types\n\nexport interface BankData {\n  mint: PublicKey;\n  mintDecimals: number;\n\n  group: PublicKey;\n\n  depositShareValue: WrappedI80F48;\n  liabilityShareValue: WrappedI80F48;\n\n  liquidityVault: PublicKey;\n  liquidityVaultBump: number;\n  liquidityVaultAuthorityBump: number;\n\n  insuranceVault: PublicKey;\n  insuranceVaultBump: number;\n  insuranceVaultAuthorityBump: number;\n\n  feeVault: PublicKey;\n  feeVaultBump: number;\n  feeVaultAuthorityBump: number;\n\n  config: BankConfigData;\n\n  totalLiabilityShares: WrappedI80F48;\n  totalDepositShares: WrappedI80F48;\n\n  lastUpdate: BN;\n}\n\nexport interface BankConfigData {\n  depositWeightInit: WrappedI80F48;\n  depositWeightMaint: WrappedI80F48;\n\n  liabilityWeightInit: WrappedI80F48;\n  liabilityWeightMaint: WrappedI80F48;\n\n  maxCapacity: BN;\n\n  pythOracle: PublicKey;\n  interestRateConfig: InterestRateConfigData;\n}\n\nexport interface InterestRateConfigData {\n  // Curve Params\n  optimalUtilizationRate: WrappedI80F48;\n  plateauInterestRate: WrappedI80F48;\n  maxInterestRate: WrappedI80F48;\n\n  // Fees\n  insuranceFeeFixedApr: WrappedI80F48;\n  insuranceIrFee: WrappedI80F48;\n  protocolFixedFeeApr: WrappedI80F48;\n  protocolIrFee: WrappedI80F48;\n}\n\nexport enum PriceBias {\n  Lowest = 0,\n  None = 1,\n  Highest = 2,\n}\n\nfunction priceComponentsToBigNumber(price: BigNumber, exp: number): BigNumber {\n  return price.times(new BigNumber(10).pow(exp - USDC_DECIMALS));\n}\n","import {\n  Address,\n  BN,\n  BorshCoder,\n  translateAddress,\n} from \"@project-serum/anchor\";\nimport { associatedAddress } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Commitment,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  DEFAULT_COMMITMENT,\n  getBankVaultAuthority,\n  MarginfiClient,\n  processTransaction,\n  shortenAddress,\n  uiToNative,\n  wrappedI80F48toBigNumber,\n} from \".\";\nimport Bank, { BankData, PriceBias } from \"./bank\";\nimport MarginfiGroup from \"./group\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport instructions from \"./instructions\";\nimport {\n  AccountType,\n  BankVaultType,\n  InstructionsWrapper,\n  MarginfiConfig,\n  MarginfiProgram,\n  UiAmount,\n  WrappedI80F48,\n} from \"./types\";\n\n/**\n * Wrapper class around a specific marginfi marginfi account.\n */\nclass MarginfiAccount {\n  public readonly publicKey: PublicKey;\n\n  private _group: MarginfiGroup;\n  private _authority: PublicKey;\n  private _lendingAccount: Balance[];\n\n  /**\n   * @internal\n   */\n  private constructor(\n    marginfiAccountPk: PublicKey,\n    readonly client: MarginfiClient,\n    group: MarginfiGroup,\n    rawData: MarginfiAccountData\n  ) {\n    this.publicKey = marginfiAccountPk;\n\n    this._group = group;\n    this._authority = rawData.authority;\n\n    this._lendingAccount = rawData.lendingAccount.balances\n      .filter((la) => la.active)\n      .map((la) => new Balance(la));\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get authority(): PublicKey {\n    return this._authority;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get lendingAccount(): Balance[] {\n    return this._lendingAccount;\n  }\n\n  /** @internal */\n  private get _program() {\n    return this.client.program;\n  }\n\n  /** @internal */\n  private get _config() {\n    return this.client.config;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiAccount network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @returns MarginfiAccount instance\n   */\n  static async fetch(\n    marginfiAccountPk: Address,\n    client: MarginfiClient,\n    commitment?: Commitment\n  ): Promise<MarginfiAccount> {\n    const { config, program } = client;\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    const accountData = await MarginfiAccount._fetchAccountData(\n      _marginfiAccountPk,\n      config,\n      program,\n      commitment\n    );\n\n    const marginfiAccount = new MarginfiAccount(\n      _marginfiAccountPk,\n      client,\n      await MarginfiGroup.fetch(config, program, commitment),\n      accountData\n    );\n\n    require(\"debug\")(\"mfi:margin-account\")(\n      \"Loaded marginfi account %s\",\n      _marginfiAccountPk\n    );\n\n    return marginfiAccount;\n  }\n\n  /**\n   * MarginfiAccount local factory (decoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param accountData Decoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountData(\n    marginfiAccountPk: Address,\n    client: MarginfiClient,\n    accountData: MarginfiAccountData,\n    marginfiGroup: MarginfiGroup\n  ) {\n    if (!accountData.group.equals(client.config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${accountData.group.toBase58()}. Expected: ${client.config.groupPk.toBase58()}`\n      );\n\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    return new MarginfiAccount(\n      _marginfiAccountPk,\n      client,\n      marginfiGroup,\n      accountData\n    );\n  }\n\n  /**\n   * MarginfiAccount local factory (encoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param marginfiAccountRawData Encoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountDataRaw(\n    marginfiAccountPk: PublicKey,\n    client: MarginfiClient,\n    marginfiAccountRawData: Buffer,\n    marginfiGroup: MarginfiGroup\n  ) {\n    const marginfiAccountData = MarginfiAccount.decode(marginfiAccountRawData);\n\n    return MarginfiAccount.fromAccountData(\n      marginfiAccountPk,\n      client,\n      marginfiAccountData,\n      marginfiGroup\n    );\n  }\n\n  /**\n   * Create transaction instruction to deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @returns `MarginDepositCollateral` transaction instruction\n   */\n  async makeDepositIx(\n    amount: UiAmount,\n    bank: Bank\n  ): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n\n    const ix = await instructions.makeDepositIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        authorityPk: this.client.provider.wallet.publicKey,\n        signerTokenAccountPk: userTokenAtaPk,\n        bankLiquidityVaultPk: bank.liquidityVault,\n        bankPk: bank.publicKey,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals) }\n    );\n\n    return { instructions: [ix], keys: [] };\n  }\n\n  /**\n   * Deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @returns Transaction signature\n   */\n  async deposit(amount: UiAmount, bank: Bank): Promise<string> {\n    const debug = require(\"debug\")(\n      `mfi:margin-account:${this.publicKey.toString()}:deposit`\n    );\n\n    debug(\"Depositing %s %s into marginfi account\", amount, bank.mint);\n    const ixs = await this.makeDepositIx(amount, bank);\n    const tx = new Transaction().add(...ixs.instructions);\n    const sig = await processTransaction(this.client.provider, tx);\n    debug(\"Depositing successful %s\", sig);\n    await this.reload();\n    return sig;\n  }\n\n  /**\n   * Create transaction instruction to withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (mint native unit)\n   * @param bank Bank to withdraw from\n   * @returns `MarginWithdrawCollateral` transaction instruction\n   */\n  async makeWithdrawIx(\n    amount: UiAmount,\n    bank: Bank\n  ): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n    const [bankLiquidityVaultAuthorityPk] = await getBankVaultAuthority(\n      BankVaultType.LiquidityVault,\n      bank.publicKey,\n      this._program.programId\n    );\n\n    const remainingAccounts = this.getHealthCheckAccounts([bank]);\n\n    const ix = await instructions.makeWithdrawIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        signerPk: this.client.provider.wallet.publicKey,\n        bankPk: bank.publicKey,\n        destinationTokenAccountPk: userTokenAtaPk,\n        bankLiquidityVaultPk: bank.liquidityVault,\n        bankLiquidityVaultAuthorityPk,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals) },\n      remainingAccounts\n    );\n\n    return { instructions: [ix], keys: [] };\n  }\n\n  /**\n   * Withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (UI unit)\n   * @param bank Bank to withdraw from\n   * @returns Transaction signature\n   */\n  async withdraw(amount: UiAmount, bank: Bank): Promise<string> {\n    const debug = require(\"debug\")(\n      `mfi:margin-account:${this.publicKey.toString()}:withdraw`\n    );\n    debug(\"Withdrawing %s from marginfi account\", amount);\n    const ixs = await this.makeWithdrawIx(amount, bank);\n    const tx = new Transaction().add(...ixs.instructions);\n    const sig = await processTransaction(this.client.provider, tx);\n    debug(\"Withdrawing successful %s\", sig);\n    await this.reload();\n    return sig;\n  }\n\n  // --- Others\n\n  getHealthCheckAccounts(mandatoryBanks: Bank[] = []): AccountMeta[] {\n    let mandatoryBanksSet = new Set(mandatoryBanks.map((b) => b.publicKey));\n    let mandatoryBanksAdded = new Set<PublicKey>();\n\n    let remainingAccounts = this.lendingAccount.flatMap((balance) => {\n      const bank = this._group.getBankByPk(balance.bankPk);\n      if (bank === null)\n        throw Error(`Could not find bank ${balance.bankPk.toBase58()}`);\n\n      if (mandatoryBanksSet.has(bank.publicKey)) {\n        mandatoryBanksAdded.add(bank.publicKey);\n      }\n\n      return [\n        {\n          pubkey: bank.publicKey,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: bank.config.pythOracle,\n          isSigner: false,\n          isWritable: false,\n        },\n      ];\n    });\n\n    const remainingBanksSet = new Set(\n      [...mandatoryBanksSet].filter((x) => !mandatoryBanksAdded.has(x))\n    );\n\n    if (remainingBanksSet.size > 0) {\n      remainingBanksSet.forEach((bankPk) => {\n        const bank = this._group.getBankByPk(bankPk);\n        if (bank === null)\n          throw Error(`Could not find bank ${bankPk.toBase58()}`);\n\n        remainingAccounts = remainingAccounts.concat([\n          {\n            pubkey: bankPk,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: bank.config.pythOracle,\n            isSigner: false,\n            isWritable: false,\n          },\n        ]);\n      });\n    }\n\n    return remainingAccounts;\n  }\n\n  /**\n   * Fetch marginfi account data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @returns Decoded marginfi account data struct\n   */\n  private static async _fetchAccountData(\n    accountAddress: Address,\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountData> {\n    const mergedCommitment =\n      commitment ??\n      program.provider.connection.commitment ??\n      DEFAULT_COMMITMENT;\n\n    const data: MarginfiAccountData =\n      (await program.account.marginfiAccount.fetch(\n        accountAddress,\n        mergedCommitment\n      )) as any;\n\n    if (!data.group.equals(config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${data.group.toBase58()}. Expected: ${config.groupPk.toBase58()}`\n      );\n\n    return data;\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @returns Decoded marginfi account data struct\n   */\n  static decode(encoded: Buffer): MarginfiAccountData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiAccount, encoded);\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param decoded Marginfi account data struct\n   * @returns Raw data buffer\n   */\n  static async encode(decoded: MarginfiAccountData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiAccount, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload() {\n    require(\"debug\")(`mfi:margin-account:${this.publicKey.toString()}:loader`)(\n      \"Reloading account data\"\n    );\n    const [marginfiGroupAi, marginfiAccountAi] =\n      await this._loadGroupAndAccountAi();\n    const marginfiAccountData = MarginfiAccount.decode(marginfiAccountAi.data);\n    if (!marginfiAccountData.group.equals(this._config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${marginfiAccountData.group.toBase58()}. Expected: ${this._config.groupPk.toBase58()}`\n      );\n\n    const bankAddresses = this._config.banks.map((b) => b.address);\n    let bankAccountsData = await this._program.account.bank.fetchMultiple(\n      bankAddresses\n    );\n\n    let nullAccounts = [];\n    for (let i = 0; i < bankAccountsData.length; i++) {\n      if (bankAccountsData[i] === null) nullAccounts.push(bankAddresses[i]);\n    }\n    if (nullAccounts.length > 0) {\n      throw Error(`Failed to fetch banks ${nullAccounts}`);\n    }\n\n    const pythAccounts =\n      await this._program.provider.connection.getMultipleAccountsInfo(\n        bankAccountsData.map((b) => (b as BankData).config.pythOracle)\n      );\n\n    const banks = bankAccountsData.map(\n      (bd, index) =>\n        new Bank(\n          this._config.banks[index].label,\n          bankAddresses[index],\n          bd as BankData,\n          parsePriceData(pythAccounts[index]!.data)\n        )\n    );\n\n    this._group = MarginfiGroup.fromAccountDataRaw(\n      this._config,\n      this._program,\n      marginfiGroupAi.data,\n      banks\n    );\n    this._updateFromAccountData(marginfiAccountData);\n  }\n\n  /**\n   * Update instance data from provided data struct.\n   *\n   * @param data Marginfi account data struct\n   */\n  private _updateFromAccountData(data: MarginfiAccountData) {\n    this._authority = data.authority;\n\n    this._lendingAccount = data.lendingAccount.balances\n      .filter((la) => la.active)\n      .map((la) => new Balance(la));\n  }\n\n  private async _loadGroupAndAccountAi(): Promise<AccountInfo<Buffer>[]> {\n    const debug = require(\"debug\")(\n      `mfi:margin-account:${this.publicKey.toString()}:loader`\n    );\n    debug(\n      \"Loading marginfi account %s, and group %s\",\n      this.publicKey,\n      this._config.groupPk\n    );\n\n    let [marginfiGroupAi, marginfiAccountAi] =\n      await this.client.provider.connection.getMultipleAccountsInfo(\n        [this._config.groupPk, this.publicKey],\n        DEFAULT_COMMITMENT\n      );\n\n    if (!marginfiAccountAi) {\n      throw Error(\"Marginfi account no found\");\n    }\n    if (!marginfiGroupAi) {\n      throw Error(\"Marginfi Group Account no found\");\n    }\n\n    return [marginfiGroupAi, marginfiAccountAi];\n  }\n\n  public getHealthComponents(marginReqType: MarginRequirementType): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this._lendingAccount\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank)\n          throw Error(\n            `Bank ${shortenAddress(accountBalance.bankPk)} not found`\n          );\n        const { assets, liabilities } = accountBalance.getUsdValueWithPriceBias(\n          bank,\n          marginReqType\n        );\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public getActiveBalances(): Balance[] {\n    return this._lendingAccount.filter((b) => b.active);\n  }\n\n  public canBeLiquidated(): boolean {\n    const { assets, liabilities } = this.getHealthComponents(\n      MarginRequirementType.Maint\n    );\n\n    return assets < liabilities;\n  }\n\n  public getBalance(bankPk: PublicKey): Balance {\n    return (\n      this._lendingAccount.find((b) => b.bankPk.equals(bankPk)) ??\n      Balance.newEmpty(bankPk)\n    );\n  }\n\n  public getFreeCollateral(): BigNumber {\n    const { assets, liabilities } = this.getHealthComponents(\n      MarginRequirementType.Init\n    );\n\n    return BigNumber.max(0, assets.minus(liabilities));\n  }\n\n  private _getHealthComponentsWithoutBias(\n    marginReqType: MarginRequirementType\n  ): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this._lendingAccount\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank)\n          throw Error(\n            `Bank ${shortenAddress(accountBalance.bankPk)} not found`\n          );\n        const { assets, liabilities } = accountBalance.getUsdValue(\n          bank,\n          marginReqType\n        );\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public computeApy(): number {\n    const { assets, liabilities } = this._getHealthComponentsWithoutBias(\n      MarginRequirementType.Equity\n    );\n    const totalUsdValue = assets.minus(liabilities);\n\n    return this.getActiveBalances()\n      .reduce((weightedApy, balance) => {\n        const bank = this._group.getBankByPk(balance.bankPk);\n        if (!bank) throw Error(`Bank ${balance.bankPk.toBase58()} not found`);\n        return weightedApy\n          .minus(\n            bank\n              .getInterestRates()\n              .borrowingRate.times(\n                balance.getUsdValue(bank, MarginRequirementType.Equity)\n                  .liabilities\n              )\n              .div(liabilities)\n          )\n          .plus(\n            bank\n              .getInterestRates()\n              .lendingRate.times(\n                balance.getUsdValue(bank, MarginRequirementType.Equity).assets\n              )\n              .div(assets)\n          );\n      }, new BigNumber(0))\n      .toNumber();\n  }\n\n  /**\n   * Calculate the maximum amount of asset that can be withdrawn from a bank given existing deposits of the asset\n   * and the untied collateral of the margin account.\n   *\n   * fc = free collateral\n   * ucb = untied collateral for bank\n   *\n   * q = (min(fc, ucb) / (price_lowest_bias * deposit_weight)) + (fc - min(fc, ucb)) / (price_highest_bias * liab_weight)\n   *\n   *\n   *\n   * NOTE FOR LIQUIDATORS\n   * This function doesn't take into account the collateral received when liquidating an account.\n   */\n  public getMaxWithdrawForBank(bank: Bank): BigNumber {\n    const balance = this.getBalance(bank.publicKey);\n\n    const freeCollateral = this.getFreeCollateral();\n    const untiedCollateralForBank = BigNumber.min(\n      bank.getAssetUsdValue(\n        balance.depositShares,\n        MarginRequirementType.Init,\n        PriceBias.Lowest\n      ),\n      freeCollateral\n    );\n\n    const priceLowestBias = bank.getPrice(PriceBias.Lowest);\n    const priceHighestBias = bank.getPrice(PriceBias.Highest);\n    const depositWeight = bank.getAssetWeight(MarginRequirementType.Init);\n    const liabWeight = bank.getLiabilityWeight(MarginRequirementType.Init);\n\n    return untiedCollateralForBank\n      .div(priceLowestBias.times(depositWeight))\n      .plus(\n        freeCollateral\n          .minus(untiedCollateralForBank)\n          .div(priceHighestBias.times(liabWeight))\n      );\n  }\n\n  public async makeLendingAccountLiquidateIx(\n    liquidateeMarginfiAccount: MarginfiAccount,\n    assetBank: Bank,\n    assetQuantityUi: UiAmount,\n    liabBank: Bank\n  ): Promise<InstructionsWrapper> {\n    const ix = await instructions.makeLendingAccountLiquidateIx(\n      this._program,\n      {\n        marginfiGroup: this._config.groupPk,\n        signer: this.client.provider.wallet.publicKey,\n        assetBank: assetBank.publicKey,\n        assetPriceFeed: assetBank.config.pythOracle,\n        liabBank: liabBank.publicKey,\n        liabPriceFeed: liabBank.config.pythOracle,\n        liquidatorMarginfiAccount: this.publicKey,\n        liquidateeMarginfiAccount: liquidateeMarginfiAccount.publicKey,\n        bankLiquidityVaultAuthority: getBankVaultAuthority(\n          BankVaultType.LiquidityVault,\n          liabBank.publicKey,\n          this._program.programId\n        )[0],\n        bankLiquidityVault: liabBank.liquidityVault,\n        bankInsuranceVault: liabBank.insuranceVault,\n      },\n      { assetAmount: uiToNative(assetQuantityUi, assetBank.mintDecimals) },\n      [\n        ...this.getHealthCheckAccounts([assetBank, liabBank]),\n        ...liquidateeMarginfiAccount.getHealthCheckAccounts(),\n      ]\n    );\n\n    return { instructions: [ix], keys: [] };\n  }\n\n  public async lendingAccountLiquidate(\n    liquidateeMarginfiAccount: MarginfiAccount,\n    assetBank: Bank,\n    assetQuantityUi: UiAmount,\n    liabBank: Bank\n  ): Promise<string> {\n    const ixw = await this.makeLendingAccountLiquidateIx(\n      liquidateeMarginfiAccount,\n      assetBank,\n      assetQuantityUi,\n      liabBank\n    );\n    const tx = new Transaction().add(...ixw.instructions);\n    return processTransaction(this.client.provider, tx);\n  }\n\n  public toString() {\n    const { assets, liabilities } = this.getHealthComponents(\n      MarginRequirementType.Equity\n    );\n\n    let str = `-----------------\n  Marginfi account:\n    Address: ${this.publicKey.toBase58()}\n    Group: ${this.group.publicKey.toBase58()}\n    Authority: ${this.authority.toBase58()}\n    Equity: ${this.getHealthComponents(\n      MarginRequirementType.Equity\n    ).assets.toFixed(6)}\n    Equity: ${assets.minus(liabilities).toFixed(6)}\n    Assets: ${assets.toFixed(6)},\n    Liabilities: ${liabilities.toFixed(6)}`;\n\n    const activeLendingAccounts = this.lendingAccount.filter((la) => la.active);\n    if (activeLendingAccounts.length > 0) {\n      str = str.concat(\"\\n-----------------\\nBalances:\");\n    }\n    for (let lendingAccount of activeLendingAccounts) {\n      const bank = this._group.getBankByPk(lendingAccount.bankPk);\n      if (!bank) {\n        console.log(`Bank ${lendingAccount.bankPk} not found`);\n        continue;\n      }\n      const utpStr = `\\n  Bank ${bank.label}:\n      Address: ${bank.publicKey.toBase58()}\n      Mint: ${bank.mint.toBase58()}\n      Equity: ${lendingAccount.getUsdValue(\n        bank,\n        MarginRequirementType.Equity\n      )}`;\n      str = str.concat(utpStr);\n    }\n\n    return str;\n  }\n}\n\nexport default MarginfiAccount;\n\n// Client types\n\nexport class Balance {\n  active: boolean;\n  bankPk: PublicKey;\n  depositShares: BigNumber;\n  liabilityShares: BigNumber;\n\n  constructor(data: BalanceData) {\n    this.active = data.active;\n    this.bankPk = data.bankPk;\n    this.depositShares = wrappedI80F48toBigNumber(data.depositShares);\n    this.liabilityShares = wrappedI80F48toBigNumber(data.liabilityShares);\n  }\n\n  public static newEmpty(bankPk: PublicKey): Balance {\n    return new Balance({\n      active: false,\n      bankPk,\n      depositShares: { value: new BN(0) },\n      liabilityShares: { value: new BN(0) },\n    });\n  }\n\n  public getUsdValue(\n    bank: Bank,\n    marginReqType: MarginRequirementType\n  ): { assets: BigNumber; liabilities: BigNumber } {\n    return {\n      assets: bank.getAssetUsdValue(\n        this.depositShares,\n        marginReqType,\n        PriceBias.None\n      ),\n      liabilities: bank.getLiabilityUsdValue(\n        this.liabilityShares,\n        marginReqType,\n        PriceBias.None\n      ),\n    };\n  }\n\n  public getUsdValueWithPriceBias(\n    bank: Bank,\n    marginReqType: MarginRequirementType\n  ): { assets: BigNumber; liabilities: BigNumber } {\n    return {\n      assets: bank.getAssetUsdValue(\n        this.depositShares,\n        marginReqType,\n        PriceBias.Lowest\n      ),\n      liabilities: bank.getLiabilityUsdValue(\n        this.liabilityShares,\n        marginReqType,\n        PriceBias.Highest\n      ),\n    };\n  }\n\n  public getQuantity(bank: Bank): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    return {\n      assets: bank.getAssetQuantity(this.depositShares),\n      liabilities: bank.getLiabilityQuantity(this.liabilityShares),\n    };\n  }\n}\n\n// On-chain types\n\nexport interface MarginfiAccountData {\n  group: PublicKey;\n  authority: PublicKey;\n  lendingAccount: { balances: BalanceData[] };\n}\n\nexport interface BalanceData {\n  active: boolean;\n  bankPk: PublicKey;\n  depositShares: WrappedI80F48;\n  liabilityShares: WrappedI80F48;\n}\n\nexport enum MarginRequirementType {\n  Init = 0,\n  Maint = 1,\n  Equity = 2,\n}\n","import { TOKEN_PROGRAM_ID } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport { AccountMeta, PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { MarginfiProgram } from \"./types\";\n\nasync function makeInitMarginfiAccountIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    signerPk: PublicKey;\n  }\n) {\n  return mfProgram.methods\n    .initializeMarginfiAccount()\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.signerPk,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n}\n\nasync function makeDepositIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    authorityPk: PublicKey;\n    signerTokenAccountPk: PublicKey;\n    bankPk: PublicKey;\n    bankLiquidityVaultPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .bankDeposit(args.amount)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.authorityPk,\n      signerTokenAccount: accounts.signerTokenAccountPk,\n      bank: accounts.bankPk,\n      bankLiquidityVault: accounts.bankLiquidityVaultPk,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nasync function makeWithdrawIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    signerPk: PublicKey;\n    bankPk: PublicKey;\n    bankLiquidityVaultAuthorityPk: PublicKey;\n    bankLiquidityVaultPk: PublicKey;\n    destinationTokenAccountPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .bankWithdraw(args.amount)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.signerPk,\n      bankLiquidityVault: accounts.bankLiquidityVaultPk,\n      bankLiquidityVaultAuthority: accounts.bankLiquidityVaultAuthorityPk,\n      destinationTokenAccount: accounts.destinationTokenAccountPk,\n      bank: accounts.bankPk,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nfunction makeLendingAccountLiquidateIx(\n  mfiProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroup: PublicKey;\n    signer: PublicKey;\n    assetBank: PublicKey;\n    assetPriceFeed: PublicKey;\n    liabBank: PublicKey;\n    liabPriceFeed: PublicKey;\n    liquidatorMarginfiAccount: PublicKey;\n    liquidateeMarginfiAccount: PublicKey;\n    bankLiquidityVaultAuthority: PublicKey;\n    bankLiquidityVault: PublicKey;\n    bankInsuranceVault: PublicKey;\n  },\n  args: {\n    assetAmount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfiProgram.methods\n    .lendingAccountLiquidate(args.assetAmount)\n    .accountsStrict({\n      marginfiGroup: accounts.marginfiGroup,\n      signer: accounts.signer,\n      assetBank: accounts.assetBank,\n      assetPriceFeed: accounts.assetPriceFeed,\n      liabBank: accounts.liabBank,\n      liabPriceFeed: accounts.liabPriceFeed,\n      liquidatorMarginfiAccount: accounts.liquidatorMarginfiAccount,\n      liquidateeMarginfiAccount: accounts.liquidateeMarginfiAccount,\n      bankLiquidityVaultAuthority: accounts.bankLiquidityVaultAuthority,\n      bankLiquidityVault: accounts.bankLiquidityVault,\n      bankInsuranceVault: accounts.bankInsuranceVault,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nconst instructions = {\n  makeDepositIx,\n  makeWithdrawIx,\n  makeInitMarginfiAccountIx,\n  makeLendingAccountLiquidateIx,\n};\n\nexport default instructions;\n","import {\n  Address,\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  translateAddress,\n} from \"@project-serum/anchor\";\nimport { bs58 } from \"@project-serum/anchor/dist/cjs/utils/bytes\";\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { InstructionsWrapper } from \"./types\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport {\n  AccountType,\n  Environment,\n  MarginfiConfig,\n  MarginfiProgram,\n} from \"./types\";\nimport { getConfig } from \"./config\";\nimport MarginfiGroup from \"./group\";\nimport instructions from \"./instructions\";\nimport { DEFAULT_COMMITMENT } from \"./constants\";\nimport { MarginfiAccountData } from \"./account\";\nimport MarginfiAccountReadonly from \"./accountReadonly\";\n\n/**\n * Entrypoint to interact with the marginfi contract.\n */\nclass MarginfiClientReadonly {\n  public readonly programId: PublicKey;\n  private _group: MarginfiGroup;\n\n  /**\n   * @internal\n   */\n  private constructor(\n    readonly config: MarginfiConfig,\n    readonly program: MarginfiProgram,\n    group: MarginfiGroup\n  ) {\n    this.programId = config.programId;\n    this._group = group;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiClient factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param config marginfi config\n   * @param wallet User wallet (used to pay fees and sign transations)\n   * @param connection Solana web.js Connection object\n   * @param opts Solana web.js ConfirmOptions object\n   * @returns MarginfiClient instance\n   */\n  static async fetch(\n    config: MarginfiConfig,\n    connection: Connection,\n    opts?: ConfirmOptions\n  ) {\n    const debug = require(\"debug\")(\"mfi:client\");\n    debug(\n      \"Loading Marginfi Client\\n\\tprogram: %s\\n\\tenv: %s\\n\\tgroup: %s\\n\\turl: %s\",\n      config.programId,\n      config.environment,\n      config.groupPk,\n      connection.rpcEndpoint\n    );\n\n    const provider = new AnchorProvider(connection, {} as any, {\n      ...AnchorProvider.defaultOptions(),\n      commitment:\n        connection.commitment ?? AnchorProvider.defaultOptions().commitment,\n      ...opts,\n    });\n\n    const program = new Program(\n      MARGINFI_IDL,\n      config.programId,\n      provider\n    ) as any as MarginfiProgram;\n    return new MarginfiClientReadonly(\n      config,\n      program,\n      await MarginfiGroup.fetch(config, program, opts?.commitment)\n    );\n  }\n\n  static async fromEnv(\n    overrides?: Partial<{\n      env: Environment;\n      connection: Connection;\n      programId: Address;\n      marginfiGroup: Address;\n    }>\n  ): Promise<MarginfiClientReadonly> {\n    const debug = require(\"debug\")(\"mfi:client\");\n    const env = overrides?.env ?? (process.env.MARGINFI_ENV! as Environment);\n    const connection =\n      overrides?.connection ??\n      new Connection(process.env.MARGINFI_RPC_ENDPOINT!, {\n        commitment: DEFAULT_COMMITMENT,\n      });\n    const programId =\n      overrides?.programId ?? new PublicKey(process.env.MARGINFI_PROGRAM!);\n    const groupPk =\n      overrides?.marginfiGroup ??\n      (process.env.MARGINFI_GROUP\n        ? new PublicKey(process.env.MARGINFI_GROUP)\n        : PublicKey.default);\n\n    debug(\"Loading the marginfi client from env vars\");\n    debug(\"Env: %s\\nProgram: %s\\nGroup: %s\", env, programId, groupPk);\n\n    const config = await getConfig(env, {\n      groupPk: translateAddress(groupPk),\n      programId: translateAddress(programId),\n    });\n\n    return MarginfiClientReadonly.fetch(config, connection, {\n      commitment: connection.commitment,\n    });\n  }\n\n  // --- Getters and setters\n\n  /**\n   * Marginfi account group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  get provider(): AnchorProvider {\n    return this.program.provider as AnchorProvider;\n  }\n\n  // --- Others\n\n  /**\n   * Create transaction instruction to create a new marginfi account under the authority of the user.\n   *\n   * @returns transaction instruction\n   */\n  async makeCreateMarginfiAccountIx(\n    marginfiAccountKeypair?: Keypair\n  ): Promise<InstructionsWrapper> {\n    const dbg = require(\"debug\")(\"mfi:client\");\n    const accountKeypair = marginfiAccountKeypair || Keypair.generate();\n\n    dbg(\"Generating marginfi account ix for %s\", accountKeypair.publicKey);\n\n    const initMarginfiAccountIx = await instructions.makeInitMarginfiAccountIx(\n      this.program,\n      {\n        marginfiGroupPk: this._group.publicKey,\n        marginfiAccountPk: accountKeypair.publicKey,\n        signerPk: this.provider.wallet.publicKey,\n      }\n    );\n\n    const ixs = [initMarginfiAccountIx];\n\n    return {\n      instructions: ixs,\n      keys: [accountKeypair],\n    };\n  }\n\n  /**\n   * Retrieves the addresses of all marginfi accounts in the udnerlying group.\n   *\n   * @returns Account addresses\n   */\n  async getAllMarginfiAccountAddresses(): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(\n        this.programId,\n        {\n          commitment: this.program.provider.connection.commitment,\n          dataSlice: {\n            offset: 0,\n            length: 0,\n          },\n          filters: [\n            {\n              memcmp: {\n                bytes: this._group.publicKey.toBase58(),\n                offset: 8 + 32, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n              },\n            },\n            {\n              memcmp: {\n                offset: 0,\n                bytes: bs58.encode(\n                  BorshAccountsCoder.accountDiscriminator(\n                    AccountType.MarginfiAccount\n                  )\n                ),\n              },\n            },\n          ],\n        }\n      )\n    ).map((a) => a.pubkey);\n  }\n\n  /**\n   * Retrieves all marginfi accounts under the specified authority.\n   *\n   * @returns MarginfiAccount instances\n   */\n  async getMarginfiAccountsForAuthority(\n    authority: Address\n  ): Promise<MarginfiAccountReadonly[]> {\n    const marginfiGroup = await MarginfiGroup.fetch(this.config, this.program);\n    const _authority = translateAddress(authority);\n    return (\n      await this.program.account.marginfiAccount.all([\n        {\n          memcmp: {\n            bytes: _authority.toBase58(),\n            offset: 8, // authority is the first field in the account, so only offset is the discriminant\n          },\n        },\n        {\n          memcmp: {\n            bytes: this._group.publicKey.toBase58(),\n            offset: 8 + 32, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n          },\n        },\n      ])\n    ).map((a) =>\n      MarginfiAccountReadonly.fromAccountData(\n        a.publicKey,\n        this,\n        a.account as MarginfiAccountData,\n        marginfiGroup\n      )\n    );\n  }\n\n  /**\n   * Retrieves the addresses of all accounts owned by the marginfi program.\n   *\n   * @returns Account addresses\n   */\n  async getAllProgramAccountAddresses(type: AccountType): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(\n        this.programId,\n        {\n          commitment: this.program.provider.connection.commitment,\n          dataSlice: {\n            offset: 0,\n            length: 0,\n          },\n          filters: [\n            {\n              memcmp: {\n                offset: 0,\n                bytes: bs58.encode(\n                  BorshAccountsCoder.accountDiscriminator(type)\n                ),\n              },\n            },\n          ],\n        }\n      )\n    ).map((a) => a.pubkey);\n  }\n}\n\nexport default MarginfiClientReadonly;\n","import { Address, BorshCoder, translateAddress } from \"@project-serum/anchor\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport { AccountInfo, Commitment, PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { DEFAULT_COMMITMENT, shortenAddress } from \".\";\nimport { Balance, MarginfiAccountData, MarginRequirementType } from \"./account\";\nimport Bank, { BankData } from \"./bank\";\nimport MarginfiClientReadonly from \"./clientReadonly\";\nimport MarginfiGroup from \"./group\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { AccountType, MarginfiConfig, MarginfiProgram } from \"./types\";\n\n/**\n * Wrapper class around a specific marginfi marginfi account.\n */\nclass MarginfiAccountReadonly {\n  public readonly publicKey: PublicKey;\n\n  private _group: MarginfiGroup;\n  private _authority: PublicKey;\n  private _lendingAccount: Balance[];\n\n  /**\n   * @internal\n   */\n  private constructor(\n    marginfiAccountPk: PublicKey,\n    readonly client: MarginfiClientReadonly,\n    group: MarginfiGroup,\n    rawData: MarginfiAccountData\n  ) {\n    this.publicKey = marginfiAccountPk;\n\n    this._group = group;\n    this._authority = rawData.authority;\n\n    this._lendingAccount = rawData.lendingAccount.balances\n      .filter((la) => la.active)\n      .map((la) => new Balance(la));\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get authority(): PublicKey {\n    return this._authority;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get lendingAccount(): Balance[] {\n    return this._lendingAccount;\n  }\n\n  /** @internal */\n  private get _program() {\n    return this.client.program;\n  }\n\n  /** @internal */\n  private get _config() {\n    return this.client.config;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiAccount network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @returns MarginfiAccount instance\n   */\n  static async fetch(\n    marginfiAccountPk: Address,\n    client: MarginfiClientReadonly,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountReadonly> {\n    const { config, program } = client;\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    const accountData = await MarginfiAccountReadonly._fetchAccountData(\n      _marginfiAccountPk,\n      config,\n      program,\n      commitment\n    );\n\n    const marginfiAccount = new MarginfiAccountReadonly(\n      _marginfiAccountPk,\n      client,\n      await MarginfiGroup.fetch(config, program, commitment),\n      accountData\n    );\n\n    require(\"debug\")(\"mfi:margin-account\")(\n      \"Loaded marginfi account %s\",\n      _marginfiAccountPk\n    );\n\n    return marginfiAccount;\n  }\n\n  /**\n   * MarginfiAccount local factory (decoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param accountData Decoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountData(\n    marginfiAccountPk: Address,\n    client: MarginfiClientReadonly,\n    accountData: MarginfiAccountData,\n    marginfiGroup: MarginfiGroup\n  ) {\n    if (!accountData.group.equals(client.config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${accountData.group.toBase58()}. Expected: ${client.config.groupPk.toBase58()}`\n      );\n\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    return new MarginfiAccountReadonly(\n      _marginfiAccountPk,\n      client,\n      marginfiGroup,\n      accountData\n    );\n  }\n\n  /**\n   * MarginfiAccount local factory (encoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param marginfiAccountRawData Encoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountDataRaw(\n    marginfiAccountPk: PublicKey,\n    client: MarginfiClientReadonly,\n    marginfiAccountRawData: Buffer,\n    marginfiGroup: MarginfiGroup\n  ) {\n    const marginfiAccountData = MarginfiAccountReadonly.decode(\n      marginfiAccountRawData\n    );\n\n    return MarginfiAccountReadonly.fromAccountData(\n      marginfiAccountPk,\n      client,\n      marginfiAccountData,\n      marginfiGroup\n    );\n  }\n\n  // --- Others\n\n  /**\n   * Fetch marginfi account data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @returns Decoded marginfi account data struct\n   */\n  private static async _fetchAccountData(\n    accountAddress: Address,\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountData> {\n    const mergedCommitment =\n      commitment ??\n      program.provider.connection.commitment ??\n      DEFAULT_COMMITMENT;\n\n    const data: MarginfiAccountData =\n      (await program.account.marginfiAccount.fetch(\n        accountAddress,\n        mergedCommitment\n      )) as any;\n\n    if (!data.group.equals(config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${data.group.toBase58()}. Expected: ${config.groupPk.toBase58()}`\n      );\n\n    return data;\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @returns Decoded marginfi account data struct\n   */\n  static decode(encoded: Buffer): MarginfiAccountData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiAccount, encoded);\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param decoded Marginfi account data struct\n   * @returns Raw data buffer\n   */\n  static async encode(decoded: MarginfiAccountData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiAccount, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload() {\n    require(\"debug\")(`mfi:margin-account:${this.publicKey.toString()}:loader`)(\n      \"Reloading account data\"\n    );\n    const [marginfiGroupAi, marginfiAccountAi] =\n      await this.loadGroupAndAccountAi();\n    const marginfiAccountData = MarginfiAccountReadonly.decode(\n      marginfiAccountAi.data\n    );\n    if (!marginfiAccountData.group.equals(this._config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${marginfiAccountData.group.toBase58()}. Expected: ${this._config.groupPk.toBase58()}`\n      );\n\n    const bankAddresses = this._config.banks.map((b) => b.address);\n    let bankAccountsData = await this._program.account.bank.fetchMultiple(\n      bankAddresses\n    );\n\n    let nullAccounts = [];\n    for (let i = 0; i < bankAccountsData.length; i++) {\n      if (bankAccountsData[i] === null) nullAccounts.push(bankAddresses[i]);\n    }\n    if (nullAccounts.length > 0) {\n      throw Error(`Failed to fetch banks ${nullAccounts}`);\n    }\n\n    const pythAccounts =\n      await this._program.provider.connection.getMultipleAccountsInfo(\n        bankAccountsData.map((b) => (b as BankData).config.pythOracle)\n      );\n\n    const banks = bankAccountsData.map(\n      (bd, index) =>\n        new Bank(\n          this._config.banks[index].label,\n          bankAddresses[index],\n          bd as BankData,\n          parsePriceData(pythAccounts[index]!.data)\n        )\n    );\n\n    this._group = MarginfiGroup.fromAccountDataRaw(\n      this._config,\n      this._program,\n      marginfiGroupAi.data,\n      banks\n    );\n    this._updateFromAccountData(marginfiAccountData);\n  }\n\n  /**\n   * Update instance data from provided data struct.\n   *\n   * @param data Marginfi account data struct\n   */\n  private _updateFromAccountData(data: MarginfiAccountData) {\n    this._authority = data.authority;\n\n    this._lendingAccount = data.lendingAccount.balances\n      .filter((la) => la.active)\n      .map((la) => new Balance(la));\n  }\n\n  private async loadGroupAndAccountAi(): Promise<AccountInfo<Buffer>[]> {\n    const debug = require(\"debug\")(\n      `mfi:margin-account:${this.publicKey.toString()}:loader`\n    );\n    debug(\n      \"Loading marginfi account %s, and group %s\",\n      this.publicKey,\n      this._config.groupPk\n    );\n\n    let [marginfiGroupAi, marginfiAccountAi] =\n      await this.client.provider.connection.getMultipleAccountsInfo(\n        [this._config.groupPk, this.publicKey],\n        DEFAULT_COMMITMENT\n      );\n\n    if (!marginfiAccountAi) {\n      throw Error(\"Marginfi account no found\");\n    }\n    if (!marginfiGroupAi) {\n      throw Error(\"Marginfi Group Account no found\");\n    }\n\n    return [marginfiGroupAi, marginfiAccountAi];\n  }\n\n  public getHealthComponents(marginReqType: MarginRequirementType): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this._lendingAccount\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank)\n          throw Error(\n            `Bank ${shortenAddress(accountBalance.bankPk)} not found`\n          );\n        const { assets, liabilities } = accountBalance.getUsdValueWithPriceBias(\n          bank,\n          marginReqType\n        );\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public canBeLiquidated(): boolean {\n    const { assets, liabilities } = this.getHealthComponents(\n      MarginRequirementType.Maint\n    );\n\n    return assets < liabilities;\n  }\n\n  // Calculate the max withdraw of a lending account balance.\n  // max_withdraw = max(free_collateral, balance_deposit) + max(free_collateral - balance_deposit, 0) / balance_liab_weight\n  public getMaxWithdrawForBank(bank: Bank): BigNumber {\n    // TODO\n\n    return new BigNumber(0);\n  }\n\n  // public toString() {\n  //   const marginRequirementInit = this.computeMarginRequirement(\n  //     MarginRequirementType.Init\n  //   );\n  //   const marginRequirementMaint = this.computeMarginRequirement(\n  //     MarginRequirementType.Maint\n  //   );\n\n  //   const initHealth =\n  //     marginRequirementInit.toNumber() <= 0\n  //       ? Infinity\n  //       : equity.div(marginRequirementInit.toNumber());\n  //   const maintHealth =\n  //     marginRequirementMaint.toNumber() <= 0\n  //       ? Infinity\n  //       : equity.div(marginRequirementMaint.toNumber());\n  //   const marginRatio = liabilities.lte(0) ? Infinity : equity.div(liabilities);\n\n  //   let str = `-----------------\n  // Marginfi account:\n  //   Address: ${this.publicKey.toBase58()}\n  //   GA Balance: ${deposits.toFixed(6)}\n  //   Equity: ${equity.toFixed(6)}\n  //   Mr Adjusted Equity: ${mrEquity.toFixed(6)}\n  //   Assets: ${assets.toFixed(6)},\n  //   Liabilities: ${liabilities.toFixed(6)}\n  //   Margin ratio: ${marginRatio.toFixed(6)}\n  //   Requirement\n  //     init: ${marginRequirementInit.toFixed(6)}, health: ${initHealth.toFixed(\n  //     6\n  //   )}\n  //     maint: ${marginRequirementMaint.toFixed(\n  //       6\n  //     )}, health: ${maintHealth.toFixed(6)}`;\n\n  //   if (this.activeUtps.length > 0) {\n  //     str = str.concat(\"\\n-----------------\\nUTPs:\");\n  //   }\n  //   for (let utp of this.activeUtps) {\n  //     const utpStr = `\\n  ${UTP_NAME[utp.index]}:\n  //     Address: ${utp.address.toBase58()}\n  //     Equity: ${utp.equity.toFixed(6)},\n  //     Free collateral: ${utp.freeCollateral.toFixed(6)}`;\n  //     str = str.concat(utpStr);\n  //   }\n\n  //   return str;\n  // }\n\n  // [customInspectSymbol](_depth: number, _inspectOptions: any, _inspect: any) {\n  //   return this.toString();\n  // }\n}\n\nexport default MarginfiAccountReadonly;\n"]}